<?php
/**
 * ConceptSpecificMethodsApi
 * PHP version 5
 *
 * @category Class
 * @package  SkosmosClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Skosmos API
 *
 * The Skosmos REST API is a read-only interface to the data stored on the vocabulary server. The URL namespace is the base URL of the Skosmos instance followed by `/rest/v1/`.   Most methods return the data as UTF-8 encoded JSON-LD, served using the `application/json` MIME type. The data consists of a single JSON object which includes JSON-LD context information (in the `@context` field) and one or more fields which contain the actual data. Some methods (`data`) return other formats (RDF/XML, Turtle, RDF/JSON) with the appropriate MIME type.  The API supports Cross-Origin Resource Sharing by setting the Access-Control-Allow-Origin HTTP header to `\"*\"` for all requests.  The API supports the JSONP convention of appending a callback parameter to any URL. The returned data will then be wrapped in a JavaScript function call using the function name provided as the callback parameter value. JSONP wrapped data will be served using the `application/javascript` MIME type.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.24
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace SkosmosClient\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use SkosmosClient\ApiException;
use SkosmosClient\Configuration;
use SkosmosClient\HeaderSelector;
use SkosmosClient\ObjectSerializer;

/**
 * ConceptSpecificMethodsApi Class Doc Comment
 *
 * @category Class
 * @package  SkosmosClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ConceptSpecificMethodsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation vocidBroaderGet
     *
     * Broader concepts of the requested concept
     *
     * @param  string $vocid a Skosmos vocabulary identifier e.g. \&quot;stw\&quot; or \&quot;yso\&quot; (required)
     * @param  string $uri URI of the concept whose broader concept to return (required)
     * @param  string $lang label language, e.g. \&quot;en\&quot; or \&quot;fi\&quot; (optional)
     *
     * @throws \SkosmosClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SkosmosClient\Model\BroaderResult
     */
    public function vocidBroaderGet($vocid, $uri, $lang = null)
    {
        list($response) = $this->vocidBroaderGetWithHttpInfo($vocid, $uri, $lang);
        return $response;
    }

    /**
     * Operation vocidBroaderGetWithHttpInfo
     *
     * Broader concepts of the requested concept
     *
     * @param  string $vocid a Skosmos vocabulary identifier e.g. \&quot;stw\&quot; or \&quot;yso\&quot; (required)
     * @param  string $uri URI of the concept whose broader concept to return (required)
     * @param  string $lang label language, e.g. \&quot;en\&quot; or \&quot;fi\&quot; (optional)
     *
     * @throws \SkosmosClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SkosmosClient\Model\BroaderResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function vocidBroaderGetWithHttpInfo($vocid, $uri, $lang = null)
    {
        $returnType = '\SkosmosClient\Model\BroaderResult';
        $request = $this->vocidBroaderGetRequest($vocid, $uri, $lang);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SkosmosClient\Model\BroaderResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation vocidBroaderGetAsync
     *
     * Broader concepts of the requested concept
     *
     * @param  string $vocid a Skosmos vocabulary identifier e.g. \&quot;stw\&quot; or \&quot;yso\&quot; (required)
     * @param  string $uri URI of the concept whose broader concept to return (required)
     * @param  string $lang label language, e.g. \&quot;en\&quot; or \&quot;fi\&quot; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function vocidBroaderGetAsync($vocid, $uri, $lang = null)
    {
        return $this->vocidBroaderGetAsyncWithHttpInfo($vocid, $uri, $lang)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation vocidBroaderGetAsyncWithHttpInfo
     *
     * Broader concepts of the requested concept
     *
     * @param  string $vocid a Skosmos vocabulary identifier e.g. \&quot;stw\&quot; or \&quot;yso\&quot; (required)
     * @param  string $uri URI of the concept whose broader concept to return (required)
     * @param  string $lang label language, e.g. \&quot;en\&quot; or \&quot;fi\&quot; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function vocidBroaderGetAsyncWithHttpInfo($vocid, $uri, $lang = null)
    {
        $returnType = '\SkosmosClient\Model\BroaderResult';
        $request = $this->vocidBroaderGetRequest($vocid, $uri, $lang);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'vocidBroaderGet'
     *
     * @param  string $vocid a Skosmos vocabulary identifier e.g. \&quot;stw\&quot; or \&quot;yso\&quot; (required)
     * @param  string $uri URI of the concept whose broader concept to return (required)
     * @param  string $lang label language, e.g. \&quot;en\&quot; or \&quot;fi\&quot; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function vocidBroaderGetRequest($vocid, $uri, $lang = null)
    {
        // verify the required parameter 'vocid' is set
        if ($vocid === null || (is_array($vocid) && count($vocid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $vocid when calling vocidBroaderGet'
            );
        }
        // verify the required parameter 'uri' is set
        if ($uri === null || (is_array($uri) && count($uri) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uri when calling vocidBroaderGet'
            );
        }

        $resourcePath = '/{vocid}/broader';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($uri !== null) {
            $queryParams['uri'] = ObjectSerializer::toQueryValue($uri);
        }
        // query params
        if ($lang !== null) {
            $queryParams['lang'] = ObjectSerializer::toQueryValue($lang);
        }

        // path params
        if ($vocid !== null) {
            $resourcePath = str_replace(
                '{' . 'vocid' . '}',
                ObjectSerializer::toPathValue($vocid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation vocidBroaderTransitiveGet
     *
     * Broader transitive hierarchy for the requested concept
     *
     * @param  string $vocid a Skosmos vocabulary identifier e.g. \&quot;stw\&quot; or \&quot;yso\&quot; (required)
     * @param  string $uri URI of the concept whose broader transitive hierarchy to return (required)
     * @param  string $lang label language, e.g. \&quot;en\&quot; or \&quot;fi\&quot; (optional)
     *
     * @throws \SkosmosClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SkosmosClient\Model\BroaderTransitiveResult
     */
    public function vocidBroaderTransitiveGet($vocid, $uri, $lang = null)
    {
        list($response) = $this->vocidBroaderTransitiveGetWithHttpInfo($vocid, $uri, $lang);
        return $response;
    }

    /**
     * Operation vocidBroaderTransitiveGetWithHttpInfo
     *
     * Broader transitive hierarchy for the requested concept
     *
     * @param  string $vocid a Skosmos vocabulary identifier e.g. \&quot;stw\&quot; or \&quot;yso\&quot; (required)
     * @param  string $uri URI of the concept whose broader transitive hierarchy to return (required)
     * @param  string $lang label language, e.g. \&quot;en\&quot; or \&quot;fi\&quot; (optional)
     *
     * @throws \SkosmosClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SkosmosClient\Model\BroaderTransitiveResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function vocidBroaderTransitiveGetWithHttpInfo($vocid, $uri, $lang = null)
    {
        $returnType = '\SkosmosClient\Model\BroaderTransitiveResult';
        $request = $this->vocidBroaderTransitiveGetRequest($vocid, $uri, $lang);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SkosmosClient\Model\BroaderTransitiveResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation vocidBroaderTransitiveGetAsync
     *
     * Broader transitive hierarchy for the requested concept
     *
     * @param  string $vocid a Skosmos vocabulary identifier e.g. \&quot;stw\&quot; or \&quot;yso\&quot; (required)
     * @param  string $uri URI of the concept whose broader transitive hierarchy to return (required)
     * @param  string $lang label language, e.g. \&quot;en\&quot; or \&quot;fi\&quot; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function vocidBroaderTransitiveGetAsync($vocid, $uri, $lang = null)
    {
        return $this->vocidBroaderTransitiveGetAsyncWithHttpInfo($vocid, $uri, $lang)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation vocidBroaderTransitiveGetAsyncWithHttpInfo
     *
     * Broader transitive hierarchy for the requested concept
     *
     * @param  string $vocid a Skosmos vocabulary identifier e.g. \&quot;stw\&quot; or \&quot;yso\&quot; (required)
     * @param  string $uri URI of the concept whose broader transitive hierarchy to return (required)
     * @param  string $lang label language, e.g. \&quot;en\&quot; or \&quot;fi\&quot; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function vocidBroaderTransitiveGetAsyncWithHttpInfo($vocid, $uri, $lang = null)
    {
        $returnType = '\SkosmosClient\Model\BroaderTransitiveResult';
        $request = $this->vocidBroaderTransitiveGetRequest($vocid, $uri, $lang);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'vocidBroaderTransitiveGet'
     *
     * @param  string $vocid a Skosmos vocabulary identifier e.g. \&quot;stw\&quot; or \&quot;yso\&quot; (required)
     * @param  string $uri URI of the concept whose broader transitive hierarchy to return (required)
     * @param  string $lang label language, e.g. \&quot;en\&quot; or \&quot;fi\&quot; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function vocidBroaderTransitiveGetRequest($vocid, $uri, $lang = null)
    {
        // verify the required parameter 'vocid' is set
        if ($vocid === null || (is_array($vocid) && count($vocid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $vocid when calling vocidBroaderTransitiveGet'
            );
        }
        // verify the required parameter 'uri' is set
        if ($uri === null || (is_array($uri) && count($uri) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uri when calling vocidBroaderTransitiveGet'
            );
        }

        $resourcePath = '/{vocid}/broaderTransitive';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($uri !== null) {
            $queryParams['uri'] = ObjectSerializer::toQueryValue($uri);
        }
        // query params
        if ($lang !== null) {
            $queryParams['lang'] = ObjectSerializer::toQueryValue($lang);
        }

        // path params
        if ($vocid !== null) {
            $resourcePath = str_replace(
                '{' . 'vocid' . '}',
                ObjectSerializer::toPathValue($vocid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation vocidChildrenGet
     *
     * Narrower concepts of the requested concept
     *
     * @param  string $vocid a Skosmos vocabulary identifier e.g. \&quot;stw\&quot; or \&quot;yso\&quot; (required)
     * @param  string $uri URI of the concept whose narrower concepts to return (required)
     * @param  string $lang label language, e.g. \&quot;en\&quot; or \&quot;fi\&quot; (optional)
     *
     * @throws \SkosmosClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SkosmosClient\Model\ChildrenResult
     */
    public function vocidChildrenGet($vocid, $uri, $lang = null)
    {
        list($response) = $this->vocidChildrenGetWithHttpInfo($vocid, $uri, $lang);
        return $response;
    }

    /**
     * Operation vocidChildrenGetWithHttpInfo
     *
     * Narrower concepts of the requested concept
     *
     * @param  string $vocid a Skosmos vocabulary identifier e.g. \&quot;stw\&quot; or \&quot;yso\&quot; (required)
     * @param  string $uri URI of the concept whose narrower concepts to return (required)
     * @param  string $lang label language, e.g. \&quot;en\&quot; or \&quot;fi\&quot; (optional)
     *
     * @throws \SkosmosClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SkosmosClient\Model\ChildrenResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function vocidChildrenGetWithHttpInfo($vocid, $uri, $lang = null)
    {
        $returnType = '\SkosmosClient\Model\ChildrenResult';
        $request = $this->vocidChildrenGetRequest($vocid, $uri, $lang);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SkosmosClient\Model\ChildrenResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation vocidChildrenGetAsync
     *
     * Narrower concepts of the requested concept
     *
     * @param  string $vocid a Skosmos vocabulary identifier e.g. \&quot;stw\&quot; or \&quot;yso\&quot; (required)
     * @param  string $uri URI of the concept whose narrower concepts to return (required)
     * @param  string $lang label language, e.g. \&quot;en\&quot; or \&quot;fi\&quot; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function vocidChildrenGetAsync($vocid, $uri, $lang = null)
    {
        return $this->vocidChildrenGetAsyncWithHttpInfo($vocid, $uri, $lang)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation vocidChildrenGetAsyncWithHttpInfo
     *
     * Narrower concepts of the requested concept
     *
     * @param  string $vocid a Skosmos vocabulary identifier e.g. \&quot;stw\&quot; or \&quot;yso\&quot; (required)
     * @param  string $uri URI of the concept whose narrower concepts to return (required)
     * @param  string $lang label language, e.g. \&quot;en\&quot; or \&quot;fi\&quot; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function vocidChildrenGetAsyncWithHttpInfo($vocid, $uri, $lang = null)
    {
        $returnType = '\SkosmosClient\Model\ChildrenResult';
        $request = $this->vocidChildrenGetRequest($vocid, $uri, $lang);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'vocidChildrenGet'
     *
     * @param  string $vocid a Skosmos vocabulary identifier e.g. \&quot;stw\&quot; or \&quot;yso\&quot; (required)
     * @param  string $uri URI of the concept whose narrower concepts to return (required)
     * @param  string $lang label language, e.g. \&quot;en\&quot; or \&quot;fi\&quot; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function vocidChildrenGetRequest($vocid, $uri, $lang = null)
    {
        // verify the required parameter 'vocid' is set
        if ($vocid === null || (is_array($vocid) && count($vocid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $vocid when calling vocidChildrenGet'
            );
        }
        // verify the required parameter 'uri' is set
        if ($uri === null || (is_array($uri) && count($uri) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uri when calling vocidChildrenGet'
            );
        }

        $resourcePath = '/{vocid}/children';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($uri !== null) {
            $queryParams['uri'] = ObjectSerializer::toQueryValue($uri);
        }
        // query params
        if ($lang !== null) {
            $queryParams['lang'] = ObjectSerializer::toQueryValue($lang);
        }

        // path params
        if ($vocid !== null) {
            $resourcePath = str_replace(
                '{' . 'vocid' . '}',
                ObjectSerializer::toPathValue($vocid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation vocidDataGet
     *
     * RDF data of the whole vocabulary or a specific concept. If the vocabulary has support for it, MARCXML data is available for the whole vocabulary in each language.
     *
     * @param  string $vocid a Skosmos vocabulary identifier e.g. \&quot;stw\&quot; or \&quot;yso\&quot; (required)
     * @param  string $format The MIME type of the serialization format, e.g \&quot;text/turtle\&quot; or \&quot;application/rdf+xml\&quot;. If not specified, HTTP content negotiation (based on the Accept header) is used to determine a suitable serialization format from among the available ones. (optional)
     * @param  string $uri URI of the desired concept. When no uri parameter is given, the whole vocabulary is returned instead. (optional)
     * @param  string $lang RDF language code when the requested resource for the MIME type is language specific, e.g. \&quot;fi\&quot; or \&quot;en\&quot;. (optional)
     *
     * @throws \SkosmosClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function vocidDataGet($vocid, $format = null, $uri = null, $lang = null)
    {
        $this->vocidDataGetWithHttpInfo($vocid, $format, $uri, $lang);
    }

    /**
     * Operation vocidDataGetWithHttpInfo
     *
     * RDF data of the whole vocabulary or a specific concept. If the vocabulary has support for it, MARCXML data is available for the whole vocabulary in each language.
     *
     * @param  string $vocid a Skosmos vocabulary identifier e.g. \&quot;stw\&quot; or \&quot;yso\&quot; (required)
     * @param  string $format The MIME type of the serialization format, e.g \&quot;text/turtle\&quot; or \&quot;application/rdf+xml\&quot;. If not specified, HTTP content negotiation (based on the Accept header) is used to determine a suitable serialization format from among the available ones. (optional)
     * @param  string $uri URI of the desired concept. When no uri parameter is given, the whole vocabulary is returned instead. (optional)
     * @param  string $lang RDF language code when the requested resource for the MIME type is language specific, e.g. \&quot;fi\&quot; or \&quot;en\&quot;. (optional)
     *
     * @throws \SkosmosClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function vocidDataGetWithHttpInfo($vocid, $format = null, $uri = null, $lang = null)
    {
        $returnType = '';
        $request = $this->vocidDataGetRequest($vocid, $format, $uri, $lang);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation vocidDataGetAsync
     *
     * RDF data of the whole vocabulary or a specific concept. If the vocabulary has support for it, MARCXML data is available for the whole vocabulary in each language.
     *
     * @param  string $vocid a Skosmos vocabulary identifier e.g. \&quot;stw\&quot; or \&quot;yso\&quot; (required)
     * @param  string $format The MIME type of the serialization format, e.g \&quot;text/turtle\&quot; or \&quot;application/rdf+xml\&quot;. If not specified, HTTP content negotiation (based on the Accept header) is used to determine a suitable serialization format from among the available ones. (optional)
     * @param  string $uri URI of the desired concept. When no uri parameter is given, the whole vocabulary is returned instead. (optional)
     * @param  string $lang RDF language code when the requested resource for the MIME type is language specific, e.g. \&quot;fi\&quot; or \&quot;en\&quot;. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function vocidDataGetAsync($vocid, $format = null, $uri = null, $lang = null)
    {
        return $this->vocidDataGetAsyncWithHttpInfo($vocid, $format, $uri, $lang)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation vocidDataGetAsyncWithHttpInfo
     *
     * RDF data of the whole vocabulary or a specific concept. If the vocabulary has support for it, MARCXML data is available for the whole vocabulary in each language.
     *
     * @param  string $vocid a Skosmos vocabulary identifier e.g. \&quot;stw\&quot; or \&quot;yso\&quot; (required)
     * @param  string $format The MIME type of the serialization format, e.g \&quot;text/turtle\&quot; or \&quot;application/rdf+xml\&quot;. If not specified, HTTP content negotiation (based on the Accept header) is used to determine a suitable serialization format from among the available ones. (optional)
     * @param  string $uri URI of the desired concept. When no uri parameter is given, the whole vocabulary is returned instead. (optional)
     * @param  string $lang RDF language code when the requested resource for the MIME type is language specific, e.g. \&quot;fi\&quot; or \&quot;en\&quot;. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function vocidDataGetAsyncWithHttpInfo($vocid, $format = null, $uri = null, $lang = null)
    {
        $returnType = '';
        $request = $this->vocidDataGetRequest($vocid, $format, $uri, $lang);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'vocidDataGet'
     *
     * @param  string $vocid a Skosmos vocabulary identifier e.g. \&quot;stw\&quot; or \&quot;yso\&quot; (required)
     * @param  string $format The MIME type of the serialization format, e.g \&quot;text/turtle\&quot; or \&quot;application/rdf+xml\&quot;. If not specified, HTTP content negotiation (based on the Accept header) is used to determine a suitable serialization format from among the available ones. (optional)
     * @param  string $uri URI of the desired concept. When no uri parameter is given, the whole vocabulary is returned instead. (optional)
     * @param  string $lang RDF language code when the requested resource for the MIME type is language specific, e.g. \&quot;fi\&quot; or \&quot;en\&quot;. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function vocidDataGetRequest($vocid, $format = null, $uri = null, $lang = null)
    {
        // verify the required parameter 'vocid' is set
        if ($vocid === null || (is_array($vocid) && count($vocid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $vocid when calling vocidDataGet'
            );
        }

        $resourcePath = '/{vocid}/data';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($format !== null) {
            $queryParams['format'] = ObjectSerializer::toQueryValue($format);
        }
        // query params
        if ($uri !== null) {
            $queryParams['uri'] = ObjectSerializer::toQueryValue($uri);
        }
        // query params
        if ($lang !== null) {
            $queryParams['lang'] = ObjectSerializer::toQueryValue($lang);
        }

        // path params
        if ($vocid !== null) {
            $resourcePath = str_replace(
                '{' . 'vocid' . '}',
                ObjectSerializer::toPathValue($vocid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/rdf+xml', 'text/turtle', 'application/ld+json', 'application/json', 'application/marcxml+xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/rdf+xml', 'text/turtle', 'application/ld+json', 'application/json', 'application/marcxml+xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation vocidGroupMembersGet
     *
     * Members of the requested concept group
     *
     * @param  string $vocid a Skosmos vocabulary identifier e.g. \&quot;stw\&quot; or \&quot;yso\&quot; (required)
     * @param  string $lang label language, e.g. \&quot;en\&quot; or \&quot;fi\&quot; (optional)
     *
     * @throws \SkosmosClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SkosmosClient\Model\GroupMembers
     */
    public function vocidGroupMembersGet($vocid, $lang = null)
    {
        list($response) = $this->vocidGroupMembersGetWithHttpInfo($vocid, $lang);
        return $response;
    }

    /**
     * Operation vocidGroupMembersGetWithHttpInfo
     *
     * Members of the requested concept group
     *
     * @param  string $vocid a Skosmos vocabulary identifier e.g. \&quot;stw\&quot; or \&quot;yso\&quot; (required)
     * @param  string $lang label language, e.g. \&quot;en\&quot; or \&quot;fi\&quot; (optional)
     *
     * @throws \SkosmosClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SkosmosClient\Model\GroupMembers, HTTP status code, HTTP response headers (array of strings)
     */
    public function vocidGroupMembersGetWithHttpInfo($vocid, $lang = null)
    {
        $returnType = '\SkosmosClient\Model\GroupMembers';
        $request = $this->vocidGroupMembersGetRequest($vocid, $lang);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SkosmosClient\Model\GroupMembers',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation vocidGroupMembersGetAsync
     *
     * Members of the requested concept group
     *
     * @param  string $vocid a Skosmos vocabulary identifier e.g. \&quot;stw\&quot; or \&quot;yso\&quot; (required)
     * @param  string $lang label language, e.g. \&quot;en\&quot; or \&quot;fi\&quot; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function vocidGroupMembersGetAsync($vocid, $lang = null)
    {
        return $this->vocidGroupMembersGetAsyncWithHttpInfo($vocid, $lang)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation vocidGroupMembersGetAsyncWithHttpInfo
     *
     * Members of the requested concept group
     *
     * @param  string $vocid a Skosmos vocabulary identifier e.g. \&quot;stw\&quot; or \&quot;yso\&quot; (required)
     * @param  string $lang label language, e.g. \&quot;en\&quot; or \&quot;fi\&quot; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function vocidGroupMembersGetAsyncWithHttpInfo($vocid, $lang = null)
    {
        $returnType = '\SkosmosClient\Model\GroupMembers';
        $request = $this->vocidGroupMembersGetRequest($vocid, $lang);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'vocidGroupMembersGet'
     *
     * @param  string $vocid a Skosmos vocabulary identifier e.g. \&quot;stw\&quot; or \&quot;yso\&quot; (required)
     * @param  string $lang label language, e.g. \&quot;en\&quot; or \&quot;fi\&quot; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function vocidGroupMembersGetRequest($vocid, $lang = null)
    {
        // verify the required parameter 'vocid' is set
        if ($vocid === null || (is_array($vocid) && count($vocid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $vocid when calling vocidGroupMembersGet'
            );
        }

        $resourcePath = '/{vocid}/groupMembers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($lang !== null) {
            $queryParams['lang'] = ObjectSerializer::toQueryValue($lang);
        }

        // path params
        if ($vocid !== null) {
            $resourcePath = str_replace(
                '{' . 'vocid' . '}',
                ObjectSerializer::toPathValue($vocid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation vocidHierarchyGet
     *
     * Hierarchical context of the requested concept
     *
     * @param  string $vocid a Skosmos vocabulary identifier e.g. \&quot;stw\&quot; or \&quot;yso\&quot; (required)
     * @param  string $uri URI of the concept whose hierarchical context to return (required)
     * @param  string $lang label language, e.g. \&quot;en\&quot; or \&quot;fi\&quot; (optional)
     *
     * @throws \SkosmosClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SkosmosClient\Model\Hierarchy
     */
    public function vocidHierarchyGet($vocid, $uri, $lang = null)
    {
        list($response) = $this->vocidHierarchyGetWithHttpInfo($vocid, $uri, $lang);
        return $response;
    }

    /**
     * Operation vocidHierarchyGetWithHttpInfo
     *
     * Hierarchical context of the requested concept
     *
     * @param  string $vocid a Skosmos vocabulary identifier e.g. \&quot;stw\&quot; or \&quot;yso\&quot; (required)
     * @param  string $uri URI of the concept whose hierarchical context to return (required)
     * @param  string $lang label language, e.g. \&quot;en\&quot; or \&quot;fi\&quot; (optional)
     *
     * @throws \SkosmosClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SkosmosClient\Model\Hierarchy, HTTP status code, HTTP response headers (array of strings)
     */
    public function vocidHierarchyGetWithHttpInfo($vocid, $uri, $lang = null)
    {
        $returnType = '\SkosmosClient\Model\Hierarchy';
        $request = $this->vocidHierarchyGetRequest($vocid, $uri, $lang);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SkosmosClient\Model\Hierarchy',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation vocidHierarchyGetAsync
     *
     * Hierarchical context of the requested concept
     *
     * @param  string $vocid a Skosmos vocabulary identifier e.g. \&quot;stw\&quot; or \&quot;yso\&quot; (required)
     * @param  string $uri URI of the concept whose hierarchical context to return (required)
     * @param  string $lang label language, e.g. \&quot;en\&quot; or \&quot;fi\&quot; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function vocidHierarchyGetAsync($vocid, $uri, $lang = null)
    {
        return $this->vocidHierarchyGetAsyncWithHttpInfo($vocid, $uri, $lang)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation vocidHierarchyGetAsyncWithHttpInfo
     *
     * Hierarchical context of the requested concept
     *
     * @param  string $vocid a Skosmos vocabulary identifier e.g. \&quot;stw\&quot; or \&quot;yso\&quot; (required)
     * @param  string $uri URI of the concept whose hierarchical context to return (required)
     * @param  string $lang label language, e.g. \&quot;en\&quot; or \&quot;fi\&quot; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function vocidHierarchyGetAsyncWithHttpInfo($vocid, $uri, $lang = null)
    {
        $returnType = '\SkosmosClient\Model\Hierarchy';
        $request = $this->vocidHierarchyGetRequest($vocid, $uri, $lang);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'vocidHierarchyGet'
     *
     * @param  string $vocid a Skosmos vocabulary identifier e.g. \&quot;stw\&quot; or \&quot;yso\&quot; (required)
     * @param  string $uri URI of the concept whose hierarchical context to return (required)
     * @param  string $lang label language, e.g. \&quot;en\&quot; or \&quot;fi\&quot; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function vocidHierarchyGetRequest($vocid, $uri, $lang = null)
    {
        // verify the required parameter 'vocid' is set
        if ($vocid === null || (is_array($vocid) && count($vocid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $vocid when calling vocidHierarchyGet'
            );
        }
        // verify the required parameter 'uri' is set
        if ($uri === null || (is_array($uri) && count($uri) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uri when calling vocidHierarchyGet'
            );
        }

        $resourcePath = '/{vocid}/hierarchy';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($uri !== null) {
            $queryParams['uri'] = ObjectSerializer::toQueryValue($uri);
        }
        // query params
        if ($lang !== null) {
            $queryParams['lang'] = ObjectSerializer::toQueryValue($lang);
        }

        // path params
        if ($vocid !== null) {
            $resourcePath = str_replace(
                '{' . 'vocid' . '}',
                ObjectSerializer::toPathValue($vocid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation vocidLabelGet
     *
     * List of labels for the requested concept
     *
     * @param  string $vocid a Skosmos vocabulary identifier e.g. \&quot;stw\&quot; or \&quot;yso\&quot; (required)
     * @param  string $uri URI of the concept whose labels to return (required)
     * @param  string $lang search language, e.g. \&quot;en\&quot; or \&quot;fi\&quot; (optional)
     *
     * @throws \SkosmosClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SkosmosClient\Model\LabelsAndUri
     */
    public function vocidLabelGet($vocid, $uri, $lang = null)
    {
        list($response) = $this->vocidLabelGetWithHttpInfo($vocid, $uri, $lang);
        return $response;
    }

    /**
     * Operation vocidLabelGetWithHttpInfo
     *
     * List of labels for the requested concept
     *
     * @param  string $vocid a Skosmos vocabulary identifier e.g. \&quot;stw\&quot; or \&quot;yso\&quot; (required)
     * @param  string $uri URI of the concept whose labels to return (required)
     * @param  string $lang search language, e.g. \&quot;en\&quot; or \&quot;fi\&quot; (optional)
     *
     * @throws \SkosmosClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SkosmosClient\Model\LabelsAndUri, HTTP status code, HTTP response headers (array of strings)
     */
    public function vocidLabelGetWithHttpInfo($vocid, $uri, $lang = null)
    {
        $returnType = '\SkosmosClient\Model\LabelsAndUri';
        $request = $this->vocidLabelGetRequest($vocid, $uri, $lang);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SkosmosClient\Model\LabelsAndUri',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation vocidLabelGetAsync
     *
     * List of labels for the requested concept
     *
     * @param  string $vocid a Skosmos vocabulary identifier e.g. \&quot;stw\&quot; or \&quot;yso\&quot; (required)
     * @param  string $uri URI of the concept whose labels to return (required)
     * @param  string $lang search language, e.g. \&quot;en\&quot; or \&quot;fi\&quot; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function vocidLabelGetAsync($vocid, $uri, $lang = null)
    {
        return $this->vocidLabelGetAsyncWithHttpInfo($vocid, $uri, $lang)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation vocidLabelGetAsyncWithHttpInfo
     *
     * List of labels for the requested concept
     *
     * @param  string $vocid a Skosmos vocabulary identifier e.g. \&quot;stw\&quot; or \&quot;yso\&quot; (required)
     * @param  string $uri URI of the concept whose labels to return (required)
     * @param  string $lang search language, e.g. \&quot;en\&quot; or \&quot;fi\&quot; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function vocidLabelGetAsyncWithHttpInfo($vocid, $uri, $lang = null)
    {
        $returnType = '\SkosmosClient\Model\LabelsAndUri';
        $request = $this->vocidLabelGetRequest($vocid, $uri, $lang);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'vocidLabelGet'
     *
     * @param  string $vocid a Skosmos vocabulary identifier e.g. \&quot;stw\&quot; or \&quot;yso\&quot; (required)
     * @param  string $uri URI of the concept whose labels to return (required)
     * @param  string $lang search language, e.g. \&quot;en\&quot; or \&quot;fi\&quot; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function vocidLabelGetRequest($vocid, $uri, $lang = null)
    {
        // verify the required parameter 'vocid' is set
        if ($vocid === null || (is_array($vocid) && count($vocid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $vocid when calling vocidLabelGet'
            );
        }
        // verify the required parameter 'uri' is set
        if ($uri === null || (is_array($uri) && count($uri) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uri when calling vocidLabelGet'
            );
        }

        $resourcePath = '/{vocid}/label';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($uri !== null) {
            $queryParams['uri'] = ObjectSerializer::toQueryValue($uri);
        }
        // query params
        if ($lang !== null) {
            $queryParams['lang'] = ObjectSerializer::toQueryValue($lang);
        }

        // path params
        if ($vocid !== null) {
            $resourcePath = str_replace(
                '{' . 'vocid' . '}',
                ObjectSerializer::toPathValue($vocid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation vocidMappingsGet
     *
     * Mappings associated with the requested concept
     *
     * @param  string $vocid a Skosmos vocabulary identifier e.g. \&quot;stw\&quot; or \&quot;yso\&quot; (required)
     * @param  string $uri URI of the concept whose hierarchical context to return (required)
     * @param  bool $external Indicates whether mappings to external vocabularies should be listed (optional)
     * @param  string $clang content language, e.g. \&quot;en\&quot; or \&quot;fi\&quot; (optional)
     * @param  string $lang label language, e.g. \&quot;en\&quot; or \&quot;fi\&quot; (optional)
     *
     * @throws \SkosmosClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SkosmosClient\Model\ConceptMappings
     */
    public function vocidMappingsGet($vocid, $uri, $external = null, $clang = null, $lang = null)
    {
        list($response) = $this->vocidMappingsGetWithHttpInfo($vocid, $uri, $external, $clang, $lang);
        return $response;
    }

    /**
     * Operation vocidMappingsGetWithHttpInfo
     *
     * Mappings associated with the requested concept
     *
     * @param  string $vocid a Skosmos vocabulary identifier e.g. \&quot;stw\&quot; or \&quot;yso\&quot; (required)
     * @param  string $uri URI of the concept whose hierarchical context to return (required)
     * @param  bool $external Indicates whether mappings to external vocabularies should be listed (optional)
     * @param  string $clang content language, e.g. \&quot;en\&quot; or \&quot;fi\&quot; (optional)
     * @param  string $lang label language, e.g. \&quot;en\&quot; or \&quot;fi\&quot; (optional)
     *
     * @throws \SkosmosClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SkosmosClient\Model\ConceptMappings, HTTP status code, HTTP response headers (array of strings)
     */
    public function vocidMappingsGetWithHttpInfo($vocid, $uri, $external = null, $clang = null, $lang = null)
    {
        $returnType = '\SkosmosClient\Model\ConceptMappings';
        $request = $this->vocidMappingsGetRequest($vocid, $uri, $external, $clang, $lang);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SkosmosClient\Model\ConceptMappings',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation vocidMappingsGetAsync
     *
     * Mappings associated with the requested concept
     *
     * @param  string $vocid a Skosmos vocabulary identifier e.g. \&quot;stw\&quot; or \&quot;yso\&quot; (required)
     * @param  string $uri URI of the concept whose hierarchical context to return (required)
     * @param  bool $external Indicates whether mappings to external vocabularies should be listed (optional)
     * @param  string $clang content language, e.g. \&quot;en\&quot; or \&quot;fi\&quot; (optional)
     * @param  string $lang label language, e.g. \&quot;en\&quot; or \&quot;fi\&quot; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function vocidMappingsGetAsync($vocid, $uri, $external = null, $clang = null, $lang = null)
    {
        return $this->vocidMappingsGetAsyncWithHttpInfo($vocid, $uri, $external, $clang, $lang)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation vocidMappingsGetAsyncWithHttpInfo
     *
     * Mappings associated with the requested concept
     *
     * @param  string $vocid a Skosmos vocabulary identifier e.g. \&quot;stw\&quot; or \&quot;yso\&quot; (required)
     * @param  string $uri URI of the concept whose hierarchical context to return (required)
     * @param  bool $external Indicates whether mappings to external vocabularies should be listed (optional)
     * @param  string $clang content language, e.g. \&quot;en\&quot; or \&quot;fi\&quot; (optional)
     * @param  string $lang label language, e.g. \&quot;en\&quot; or \&quot;fi\&quot; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function vocidMappingsGetAsyncWithHttpInfo($vocid, $uri, $external = null, $clang = null, $lang = null)
    {
        $returnType = '\SkosmosClient\Model\ConceptMappings';
        $request = $this->vocidMappingsGetRequest($vocid, $uri, $external, $clang, $lang);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'vocidMappingsGet'
     *
     * @param  string $vocid a Skosmos vocabulary identifier e.g. \&quot;stw\&quot; or \&quot;yso\&quot; (required)
     * @param  string $uri URI of the concept whose hierarchical context to return (required)
     * @param  bool $external Indicates whether mappings to external vocabularies should be listed (optional)
     * @param  string $clang content language, e.g. \&quot;en\&quot; or \&quot;fi\&quot; (optional)
     * @param  string $lang label language, e.g. \&quot;en\&quot; or \&quot;fi\&quot; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function vocidMappingsGetRequest($vocid, $uri, $external = null, $clang = null, $lang = null)
    {
        // verify the required parameter 'vocid' is set
        if ($vocid === null || (is_array($vocid) && count($vocid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $vocid when calling vocidMappingsGet'
            );
        }
        // verify the required parameter 'uri' is set
        if ($uri === null || (is_array($uri) && count($uri) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uri when calling vocidMappingsGet'
            );
        }

        $resourcePath = '/{vocid}/mappings';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($uri !== null) {
            $queryParams['uri'] = ObjectSerializer::toQueryValue($uri);
        }
        // query params
        if ($external !== null) {
            $queryParams['external'] = ObjectSerializer::toQueryValue($external);
        }
        // query params
        if ($clang !== null) {
            $queryParams['clang'] = ObjectSerializer::toQueryValue($clang);
        }
        // query params
        if ($lang !== null) {
            $queryParams['lang'] = ObjectSerializer::toQueryValue($lang);
        }

        // path params
        if ($vocid !== null) {
            $resourcePath = str_replace(
                '{' . 'vocid' . '}',
                ObjectSerializer::toPathValue($vocid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation vocidNarrowerGet
     *
     * Narrower concepts of the requested concept
     *
     * @param  string $vocid a Skosmos vocabulary identifier e.g. \&quot;stw\&quot; or \&quot;yso\&quot; (required)
     * @param  string $uri URI of the concept whose narrower concept to return (required)
     * @param  string $lang label language, e.g. \&quot;en\&quot; or \&quot;fi\&quot; (optional)
     *
     * @throws \SkosmosClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SkosmosClient\Model\NarrowerResult
     */
    public function vocidNarrowerGet($vocid, $uri, $lang = null)
    {
        list($response) = $this->vocidNarrowerGetWithHttpInfo($vocid, $uri, $lang);
        return $response;
    }

    /**
     * Operation vocidNarrowerGetWithHttpInfo
     *
     * Narrower concepts of the requested concept
     *
     * @param  string $vocid a Skosmos vocabulary identifier e.g. \&quot;stw\&quot; or \&quot;yso\&quot; (required)
     * @param  string $uri URI of the concept whose narrower concept to return (required)
     * @param  string $lang label language, e.g. \&quot;en\&quot; or \&quot;fi\&quot; (optional)
     *
     * @throws \SkosmosClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SkosmosClient\Model\NarrowerResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function vocidNarrowerGetWithHttpInfo($vocid, $uri, $lang = null)
    {
        $returnType = '\SkosmosClient\Model\NarrowerResult';
        $request = $this->vocidNarrowerGetRequest($vocid, $uri, $lang);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SkosmosClient\Model\NarrowerResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation vocidNarrowerGetAsync
     *
     * Narrower concepts of the requested concept
     *
     * @param  string $vocid a Skosmos vocabulary identifier e.g. \&quot;stw\&quot; or \&quot;yso\&quot; (required)
     * @param  string $uri URI of the concept whose narrower concept to return (required)
     * @param  string $lang label language, e.g. \&quot;en\&quot; or \&quot;fi\&quot; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function vocidNarrowerGetAsync($vocid, $uri, $lang = null)
    {
        return $this->vocidNarrowerGetAsyncWithHttpInfo($vocid, $uri, $lang)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation vocidNarrowerGetAsyncWithHttpInfo
     *
     * Narrower concepts of the requested concept
     *
     * @param  string $vocid a Skosmos vocabulary identifier e.g. \&quot;stw\&quot; or \&quot;yso\&quot; (required)
     * @param  string $uri URI of the concept whose narrower concept to return (required)
     * @param  string $lang label language, e.g. \&quot;en\&quot; or \&quot;fi\&quot; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function vocidNarrowerGetAsyncWithHttpInfo($vocid, $uri, $lang = null)
    {
        $returnType = '\SkosmosClient\Model\NarrowerResult';
        $request = $this->vocidNarrowerGetRequest($vocid, $uri, $lang);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'vocidNarrowerGet'
     *
     * @param  string $vocid a Skosmos vocabulary identifier e.g. \&quot;stw\&quot; or \&quot;yso\&quot; (required)
     * @param  string $uri URI of the concept whose narrower concept to return (required)
     * @param  string $lang label language, e.g. \&quot;en\&quot; or \&quot;fi\&quot; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function vocidNarrowerGetRequest($vocid, $uri, $lang = null)
    {
        // verify the required parameter 'vocid' is set
        if ($vocid === null || (is_array($vocid) && count($vocid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $vocid when calling vocidNarrowerGet'
            );
        }
        // verify the required parameter 'uri' is set
        if ($uri === null || (is_array($uri) && count($uri) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uri when calling vocidNarrowerGet'
            );
        }

        $resourcePath = '/{vocid}/narrower';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($uri !== null) {
            $queryParams['uri'] = ObjectSerializer::toQueryValue($uri);
        }
        // query params
        if ($lang !== null) {
            $queryParams['lang'] = ObjectSerializer::toQueryValue($lang);
        }

        // path params
        if ($vocid !== null) {
            $resourcePath = str_replace(
                '{' . 'vocid' . '}',
                ObjectSerializer::toPathValue($vocid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation vocidNarrowerTransitiveGet
     *
     * Narrower transitive hierarchy for the requested concept
     *
     * @param  string $vocid a Skosmos vocabulary identifier e.g. \&quot;stw\&quot; or \&quot;yso\&quot; (required)
     * @param  string $uri URI of the concept whose narrower transitive hierarchy to return (required)
     * @param  string $lang label language, e.g. \&quot;en\&quot; or \&quot;fi\&quot; (optional)
     *
     * @throws \SkosmosClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SkosmosClient\Model\NarrowerTransitiveResult
     */
    public function vocidNarrowerTransitiveGet($vocid, $uri, $lang = null)
    {
        list($response) = $this->vocidNarrowerTransitiveGetWithHttpInfo($vocid, $uri, $lang);
        return $response;
    }

    /**
     * Operation vocidNarrowerTransitiveGetWithHttpInfo
     *
     * Narrower transitive hierarchy for the requested concept
     *
     * @param  string $vocid a Skosmos vocabulary identifier e.g. \&quot;stw\&quot; or \&quot;yso\&quot; (required)
     * @param  string $uri URI of the concept whose narrower transitive hierarchy to return (required)
     * @param  string $lang label language, e.g. \&quot;en\&quot; or \&quot;fi\&quot; (optional)
     *
     * @throws \SkosmosClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SkosmosClient\Model\NarrowerTransitiveResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function vocidNarrowerTransitiveGetWithHttpInfo($vocid, $uri, $lang = null)
    {
        $returnType = '\SkosmosClient\Model\NarrowerTransitiveResult';
        $request = $this->vocidNarrowerTransitiveGetRequest($vocid, $uri, $lang);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SkosmosClient\Model\NarrowerTransitiveResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation vocidNarrowerTransitiveGetAsync
     *
     * Narrower transitive hierarchy for the requested concept
     *
     * @param  string $vocid a Skosmos vocabulary identifier e.g. \&quot;stw\&quot; or \&quot;yso\&quot; (required)
     * @param  string $uri URI of the concept whose narrower transitive hierarchy to return (required)
     * @param  string $lang label language, e.g. \&quot;en\&quot; or \&quot;fi\&quot; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function vocidNarrowerTransitiveGetAsync($vocid, $uri, $lang = null)
    {
        return $this->vocidNarrowerTransitiveGetAsyncWithHttpInfo($vocid, $uri, $lang)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation vocidNarrowerTransitiveGetAsyncWithHttpInfo
     *
     * Narrower transitive hierarchy for the requested concept
     *
     * @param  string $vocid a Skosmos vocabulary identifier e.g. \&quot;stw\&quot; or \&quot;yso\&quot; (required)
     * @param  string $uri URI of the concept whose narrower transitive hierarchy to return (required)
     * @param  string $lang label language, e.g. \&quot;en\&quot; or \&quot;fi\&quot; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function vocidNarrowerTransitiveGetAsyncWithHttpInfo($vocid, $uri, $lang = null)
    {
        $returnType = '\SkosmosClient\Model\NarrowerTransitiveResult';
        $request = $this->vocidNarrowerTransitiveGetRequest($vocid, $uri, $lang);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'vocidNarrowerTransitiveGet'
     *
     * @param  string $vocid a Skosmos vocabulary identifier e.g. \&quot;stw\&quot; or \&quot;yso\&quot; (required)
     * @param  string $uri URI of the concept whose narrower transitive hierarchy to return (required)
     * @param  string $lang label language, e.g. \&quot;en\&quot; or \&quot;fi\&quot; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function vocidNarrowerTransitiveGetRequest($vocid, $uri, $lang = null)
    {
        // verify the required parameter 'vocid' is set
        if ($vocid === null || (is_array($vocid) && count($vocid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $vocid when calling vocidNarrowerTransitiveGet'
            );
        }
        // verify the required parameter 'uri' is set
        if ($uri === null || (is_array($uri) && count($uri) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uri when calling vocidNarrowerTransitiveGet'
            );
        }

        $resourcePath = '/{vocid}/narrowerTransitive';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($uri !== null) {
            $queryParams['uri'] = ObjectSerializer::toQueryValue($uri);
        }
        // query params
        if ($lang !== null) {
            $queryParams['lang'] = ObjectSerializer::toQueryValue($lang);
        }

        // path params
        if ($vocid !== null) {
            $resourcePath = str_replace(
                '{' . 'vocid' . '}',
                ObjectSerializer::toPathValue($vocid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation vocidRelatedGet
     *
     * Related concepts of the requested concept
     *
     * @param  string $vocid a Skosmos vocabulary identifier e.g. \&quot;stw\&quot; or \&quot;yso\&quot; (required)
     * @param  string $uri URI of the concept whose related concept to return (required)
     * @param  string $lang label language, e.g. \&quot;en\&quot; or \&quot;fi\&quot; (optional)
     *
     * @throws \SkosmosClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SkosmosClient\Model\RelatedResult
     */
    public function vocidRelatedGet($vocid, $uri, $lang = null)
    {
        list($response) = $this->vocidRelatedGetWithHttpInfo($vocid, $uri, $lang);
        return $response;
    }

    /**
     * Operation vocidRelatedGetWithHttpInfo
     *
     * Related concepts of the requested concept
     *
     * @param  string $vocid a Skosmos vocabulary identifier e.g. \&quot;stw\&quot; or \&quot;yso\&quot; (required)
     * @param  string $uri URI of the concept whose related concept to return (required)
     * @param  string $lang label language, e.g. \&quot;en\&quot; or \&quot;fi\&quot; (optional)
     *
     * @throws \SkosmosClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SkosmosClient\Model\RelatedResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function vocidRelatedGetWithHttpInfo($vocid, $uri, $lang = null)
    {
        $returnType = '\SkosmosClient\Model\RelatedResult';
        $request = $this->vocidRelatedGetRequest($vocid, $uri, $lang);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SkosmosClient\Model\RelatedResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation vocidRelatedGetAsync
     *
     * Related concepts of the requested concept
     *
     * @param  string $vocid a Skosmos vocabulary identifier e.g. \&quot;stw\&quot; or \&quot;yso\&quot; (required)
     * @param  string $uri URI of the concept whose related concept to return (required)
     * @param  string $lang label language, e.g. \&quot;en\&quot; or \&quot;fi\&quot; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function vocidRelatedGetAsync($vocid, $uri, $lang = null)
    {
        return $this->vocidRelatedGetAsyncWithHttpInfo($vocid, $uri, $lang)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation vocidRelatedGetAsyncWithHttpInfo
     *
     * Related concepts of the requested concept
     *
     * @param  string $vocid a Skosmos vocabulary identifier e.g. \&quot;stw\&quot; or \&quot;yso\&quot; (required)
     * @param  string $uri URI of the concept whose related concept to return (required)
     * @param  string $lang label language, e.g. \&quot;en\&quot; or \&quot;fi\&quot; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function vocidRelatedGetAsyncWithHttpInfo($vocid, $uri, $lang = null)
    {
        $returnType = '\SkosmosClient\Model\RelatedResult';
        $request = $this->vocidRelatedGetRequest($vocid, $uri, $lang);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'vocidRelatedGet'
     *
     * @param  string $vocid a Skosmos vocabulary identifier e.g. \&quot;stw\&quot; or \&quot;yso\&quot; (required)
     * @param  string $uri URI of the concept whose related concept to return (required)
     * @param  string $lang label language, e.g. \&quot;en\&quot; or \&quot;fi\&quot; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function vocidRelatedGetRequest($vocid, $uri, $lang = null)
    {
        // verify the required parameter 'vocid' is set
        if ($vocid === null || (is_array($vocid) && count($vocid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $vocid when calling vocidRelatedGet'
            );
        }
        // verify the required parameter 'uri' is set
        if ($uri === null || (is_array($uri) && count($uri) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uri when calling vocidRelatedGet'
            );
        }

        $resourcePath = '/{vocid}/related';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($uri !== null) {
            $queryParams['uri'] = ObjectSerializer::toQueryValue($uri);
        }
        // query params
        if ($lang !== null) {
            $queryParams['lang'] = ObjectSerializer::toQueryValue($lang);
        }

        // path params
        if ($vocid !== null) {
            $resourcePath = str_replace(
                '{' . 'vocid' . '}',
                ObjectSerializer::toPathValue($vocid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
