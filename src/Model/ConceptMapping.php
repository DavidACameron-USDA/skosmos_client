<?php
/**
 * ConceptMapping
 *
 * PHP version 5
 *
 * @category Class
 * @package  SkosmosClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Skosmos API
 *
 * The Skosmos REST API is a read-only interface to the data stored on the vocabulary server. The URL namespace is the base URL of the Skosmos instance followed by `/rest/v1/`.   Most methods return the data as UTF-8 encoded JSON-LD, served using the `application/json` MIME type. The data consists of a single JSON object which includes JSON-LD context information (in the `@context` field) and one or more fields which contain the actual data. Some methods (`data`) return other formats (RDF/XML, Turtle, RDF/JSON) with the appropriate MIME type.  The API supports Cross-Origin Resource Sharing by setting the Access-Control-Allow-Origin HTTP header to `\"*\"` for all requests.  The API supports the JSONP convention of appending a callback parameter to any URL. The returned data will then be wrapped in a JavaScript function call using the function name provided as the callback parameter value. JSONP wrapped data will be served using the `application/javascript` MIME type.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.24
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace SkosmosClient\Model;

use \ArrayAccess;
use \SkosmosClient\ObjectSerializer;

/**
 * ConceptMapping Class Doc Comment
 *
 * @category Class
 * @package  SkosmosClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ConceptMapping implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ConceptMapping';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'uri' => 'string',
        'notation' => 'string',
        'type' => 'string[]',
        'pref_label' => 'string',
        'from' => 'object',
        'to' => 'object',
        'description' => 'string',
        'href_link' => 'string',
        'lang' => 'string',
        'vocab_name' => 'string',
        'type_label' => 'string',
        'from_scheme' => 'object',
        'to_scheme' => 'object'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'uri' => null,
        'notation' => null,
        'type' => null,
        'pref_label' => null,
        'from' => null,
        'to' => null,
        'description' => null,
        'href_link' => null,
        'lang' => null,
        'vocab_name' => null,
        'type_label' => null,
        'from_scheme' => null,
        'to_scheme' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'uri' => 'uri',
        'notation' => 'notation',
        'type' => 'type',
        'pref_label' => 'prefLabel',
        'from' => 'from',
        'to' => 'to',
        'description' => 'description',
        'href_link' => 'hrefLink',
        'lang' => 'lang',
        'vocab_name' => 'vocabName',
        'type_label' => 'typeLabel',
        'from_scheme' => 'fromScheme',
        'to_scheme' => 'toScheme'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'uri' => 'setUri',
        'notation' => 'setNotation',
        'type' => 'setType',
        'pref_label' => 'setPrefLabel',
        'from' => 'setFrom',
        'to' => 'setTo',
        'description' => 'setDescription',
        'href_link' => 'setHrefLink',
        'lang' => 'setLang',
        'vocab_name' => 'setVocabName',
        'type_label' => 'setTypeLabel',
        'from_scheme' => 'setFromScheme',
        'to_scheme' => 'setToScheme'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'uri' => 'getUri',
        'notation' => 'getNotation',
        'type' => 'getType',
        'pref_label' => 'getPrefLabel',
        'from' => 'getFrom',
        'to' => 'getTo',
        'description' => 'getDescription',
        'href_link' => 'getHrefLink',
        'lang' => 'getLang',
        'vocab_name' => 'getVocabName',
        'type_label' => 'getTypeLabel',
        'from_scheme' => 'getFromScheme',
        'to_scheme' => 'getToScheme'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['uri'] = isset($data['uri']) ? $data['uri'] : null;
        $this->container['notation'] = isset($data['notation']) ? $data['notation'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['pref_label'] = isset($data['pref_label']) ? $data['pref_label'] : null;
        $this->container['from'] = isset($data['from']) ? $data['from'] : null;
        $this->container['to'] = isset($data['to']) ? $data['to'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['href_link'] = isset($data['href_link']) ? $data['href_link'] : null;
        $this->container['lang'] = isset($data['lang']) ? $data['lang'] : null;
        $this->container['vocab_name'] = isset($data['vocab_name']) ? $data['vocab_name'] : null;
        $this->container['type_label'] = isset($data['type_label']) ? $data['type_label'] : null;
        $this->container['from_scheme'] = isset($data['from_scheme']) ? $data['from_scheme'] : null;
        $this->container['to_scheme'] = isset($data['to_scheme']) ? $data['to_scheme'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets uri
     *
     * @return string
     */
    public function getUri()
    {
        return $this->container['uri'];
    }

    /**
     * Sets uri
     *
     * @param string $uri URI of the concept
     *
     * @return $this
     */
    public function setUri($uri)
    {
        $this->container['uri'] = $uri;

        return $this;
    }

    /**
     * Gets notation
     *
     * @return string
     */
    public function getNotation()
    {
        return $this->container['notation'];
    }

    /**
     * Sets notation
     *
     * @param string $notation Notation of the concept
     *
     * @return $this
     */
    public function setNotation($notation)
    {
        $this->container['notation'] = $notation;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string[]
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string[] $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets pref_label
     *
     * @return string
     */
    public function getPrefLabel()
    {
        return $this->container['pref_label'];
    }

    /**
     * Sets pref_label
     *
     * @param string $pref_label Preferred label of concept scheme (skos:prefLabel)
     *
     * @return $this
     */
    public function setPrefLabel($pref_label)
    {
        $this->container['pref_label'] = $pref_label;

        return $this;
    }

    /**
     * Gets from
     *
     * @return object
     */
    public function getFrom()
    {
        return $this->container['from'];
    }

    /**
     * Sets from
     *
     * @param object $from The origin concept in the mapping
     *
     * @return $this
     */
    public function setFrom($from)
    {
        $this->container['from'] = $from;

        return $this;
    }

    /**
     * Gets to
     *
     * @return object
     */
    public function getTo()
    {
        return $this->container['to'];
    }

    /**
     * Sets to
     *
     * @param object $to The target concept in the mapping
     *
     * @return $this
     */
    public function setTo($to)
    {
        $this->container['to'] = $to;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description Mapping description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets href_link
     *
     * @return string
     */
    public function getHrefLink()
    {
        return $this->container['href_link'];
    }

    /**
     * Sets href_link
     *
     * @param string $href_link Part of the URI of the link, used by the UI to create a href link
     *
     * @return $this
     */
    public function setHrefLink($href_link)
    {
        $this->container['href_link'] = $href_link;

        return $this;
    }

    /**
     * Gets lang
     *
     * @return string
     */
    public function getLang()
    {
        return $this->container['lang'];
    }

    /**
     * Sets lang
     *
     * @param string $lang Language of the mappings returned
     *
     * @return $this
     */
    public function setLang($lang)
    {
        $this->container['lang'] = $lang;

        return $this;
    }

    /**
     * Gets vocab_name
     *
     * @return string
     */
    public function getVocabName()
    {
        return $this->container['vocab_name'];
    }

    /**
     * Sets vocab_name
     *
     * @param string $vocab_name Vocabulary name
     *
     * @return $this
     */
    public function setVocabName($vocab_name)
    {
        $this->container['vocab_name'] = $vocab_name;

        return $this;
    }

    /**
     * Gets type_label
     *
     * @return string
     */
    public function getTypeLabel()
    {
        return $this->container['type_label'];
    }

    /**
     * Sets type_label
     *
     * @param string $type_label Label of the type, used by the UI
     *
     * @return $this
     */
    public function setTypeLabel($type_label)
    {
        $this->container['type_label'] = $type_label;

        return $this;
    }

    /**
     * Gets from_scheme
     *
     * @return object
     */
    public function getFromScheme()
    {
        return $this->container['from_scheme'];
    }

    /**
     * Sets from_scheme
     *
     * @param object $from_scheme The origin scheme in the mapping
     *
     * @return $this
     */
    public function setFromScheme($from_scheme)
    {
        $this->container['from_scheme'] = $from_scheme;

        return $this;
    }

    /**
     * Gets to_scheme
     *
     * @return object
     */
    public function getToScheme()
    {
        return $this->container['to_scheme'];
    }

    /**
     * Sets to_scheme
     *
     * @param object $to_scheme The target scheme in the mapping
     *
     * @return $this
     */
    public function setToScheme($to_scheme)
    {
        $this->container['to_scheme'] = $to_scheme;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


